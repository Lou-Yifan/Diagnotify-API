// <auto-generated />
using HealthAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthAPI.Data.Migrations
{
    [DbContext(typeof(HealthContext))]
    partial class HealthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HealthAPI.Models.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClinicianId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Event")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthAPI.Models.BloodPressure", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservedItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ObservedItemId");

                    b.ToTable("BloodPressures");
                });

            modelBuilder.Entity("HealthAPI.Models.BodyHeat", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservedItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ObservedItemId");

                    b.ToTable("BodyHeats");
                });

            modelBuilder.Entity("HealthAPI.Models.Clinician", b =>
                {
                    b.Property<string>("ClinicianId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClinicianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClinicianId");

                    b.ToTable("Clinicians");
                });

            modelBuilder.Entity("HealthAPI.Models.Diagnose", b =>
                {
                    b.Property<string>("DiagnoseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClinicianDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelfDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suggestions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnoseId");

                    b.HasIndex("ReportId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("HealthAPI.Models.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ImageId");

                    b.HasIndex("ReportId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("HealthAPI.Models.Medication", b =>
                {
                    b.Property<string>("MedicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MedicationId");

                    b.HasIndex("ReportId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("HealthAPI.Models.Medicine", b =>
                {
                    b.Property<string>("MedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Directions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PiecesPerTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimesPerDay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineId");

                    b.HasIndex("MedicationId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HealthAPI.Models.Observation", b =>
                {
                    b.Property<string>("ObservationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObservationId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("HealthAPI.Models.ObservedItem", b =>
                {
                    b.Property<string>("ObservedItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ObservationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ObservedItemId");

                    b.HasIndex("ObservationId");

                    b.ToTable("ObservedItems");
                });

            modelBuilder.Entity("HealthAPI.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthAPI.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Datetime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("HealthAPI.Models.RespiratoryRate", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservedItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ObservedItemId");

                    b.ToTable("RespiratoryRates");
                });

            modelBuilder.Entity("HealthAPI.Models.SinusRhythm", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservedItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ObservedItemId");

                    b.ToTable("SinusRhythms");
                });

            modelBuilder.Entity("HealthAPI.Models.WatchList", b =>
                {
                    b.Property<int>("WatchListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClinicianId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WatchListId");

                    b.ToTable("WatchLists");
                });

            modelBuilder.Entity("HealthAPI.Models.BloodPressure", b =>
                {
                    b.HasOne("HealthAPI.Models.ObservedItem", null)
                        .WithMany("bloodPressures")
                        .HasForeignKey("ObservedItemId");
                });

            modelBuilder.Entity("HealthAPI.Models.BodyHeat", b =>
                {
                    b.HasOne("HealthAPI.Models.ObservedItem", null)
                        .WithMany("bodyHeats")
                        .HasForeignKey("ObservedItemId");
                });

            modelBuilder.Entity("HealthAPI.Models.Diagnose", b =>
                {
                    b.HasOne("HealthAPI.Models.Report", null)
                        .WithMany("Diagnoses")
                        .HasForeignKey("ReportId");
                });

            modelBuilder.Entity("HealthAPI.Models.Image", b =>
                {
                    b.HasOne("HealthAPI.Models.Report", null)
                        .WithMany("Images")
                        .HasForeignKey("ReportId");
                });

            modelBuilder.Entity("HealthAPI.Models.Medication", b =>
                {
                    b.HasOne("HealthAPI.Models.Report", null)
                        .WithMany("Medications")
                        .HasForeignKey("ReportId");
                });

            modelBuilder.Entity("HealthAPI.Models.Medicine", b =>
                {
                    b.HasOne("HealthAPI.Models.Medication", null)
                        .WithMany("Medicines")
                        .HasForeignKey("MedicationId");
                });

            modelBuilder.Entity("HealthAPI.Models.ObservedItem", b =>
                {
                    b.HasOne("HealthAPI.Models.Observation", null)
                        .WithMany("observedItems")
                        .HasForeignKey("ObservationId");
                });

            modelBuilder.Entity("HealthAPI.Models.RespiratoryRate", b =>
                {
                    b.HasOne("HealthAPI.Models.ObservedItem", null)
                        .WithMany("respiratoryRates")
                        .HasForeignKey("ObservedItemId");
                });

            modelBuilder.Entity("HealthAPI.Models.SinusRhythm", b =>
                {
                    b.HasOne("HealthAPI.Models.ObservedItem", null)
                        .WithMany("sinusRhythms")
                        .HasForeignKey("ObservedItemId");
                });
#pragma warning restore 612, 618
        }
    }
}
